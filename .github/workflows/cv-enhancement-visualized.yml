name: 🚀 CV Auto-Enhancement Pipeline

# 🎯 **ENHANCED CV SYSTEM WITH GRANULAR VISUALIZATION**
# This workflow provides comprehensive CV enhancement with detailed visual tracking,
# rich status reporting, and deployment environment management for GitHub CI excellence.
#
# 🔄 **EXECUTION SCHEDULE**: Every 6 hours + manual dispatch
# 📊 **VISUALIZATION**: Granular workflow steps with rich status bubbling
# 🎨 **DEPLOYMENT**: Multi-environment with URL tracking and status reporting
# 📈 **MONITORING**: Real-time metrics, costs, and performance analytics

on:
  schedule:
    # Run every 6 hours: 00:00, 06:00, 12:00, 18:00 AEST daily
    - cron: '0 14,20,2,8 * * *'
  workflow_dispatch:
    inputs:
      enhancement_mode:
        description: '🎯 CV Enhancement Mode'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - activity-only
          - ai-only
          - emergency-update
      environment:
        description: '🌍 Deployment Environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - preview
      force_refresh:
        description: '🔄 Force Complete Refresh'
        required: false
        default: false
        type: boolean
      ai_creativity:
        description: '🎨 AI Enhancement Creativity'
        required: false
        default: 'balanced'
        type: choice
        options:
          - conservative
          - balanced
          - creative
          - innovative

env:
  CV_SYSTEM_VERSION: "v3.0-visualized"
  TIMEZONE: "Australia/Tasmania"
  # Deployment environments
  PROD_URL: "https://adrianwedd.com"
  STAGING_URL: "https://staging.adrianwedd.com"
  PREVIEW_URL: "https://preview.adrianwedd.com"

# 🎭 **WORKFLOW VISUALIZATION MAP**
# Each job creates a visual node in the GitHub Actions graph with:
# - Rich status information bubbled to the UI
# - Deployment URLs and environment tracking
# - Performance metrics and cost analysis
# - Real-time progress indicators

jobs:
  # 🧠 INTELLIGENCE & STRATEGY ANALYSIS
  intelligence-analysis:
    name: 🧠 Intelligence Analysis
    runs-on: ubuntu-latest
    outputs:
      enhancement-strategy: ${{ steps.strategy.outputs.strategy }}
      activity-score: ${{ steps.activity.outputs.score }}
      ai-budget: ${{ steps.budget.outputs.budget }}
      deployment-target: ${{ steps.environment.outputs.target }}
      estimated-cost: ${{ steps.cost.outputs.estimated }}
      session-id: ${{ steps.session.outputs.id }}
    steps:
      - name: 🚀 System Initialization
        run: |
          echo "🚀 **CV ENHANCEMENT PIPELINE INITIATED**"
          echo "📅 $(TZ='${{ env.TIMEZONE }}' date +'%Y-%m-%d %H:%M %Z')"
          echo "🔄 Mode: ${{ github.event.inputs.enhancement_mode || 'comprehensive' }}"
          echo "🌍 Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "🎨 Creativity: ${{ github.event.inputs.ai_creativity || 'balanced' }}"
          echo "📊 Version: ${{ env.CV_SYSTEM_VERSION }}"

      - name: 📥 Repository Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎯 Strategy Determination
        id: strategy
        run: |
          MODE="${{ github.event.inputs.enhancement_mode || 'comprehensive' }}"
          FORCE="${{ github.event.inputs.force_refresh || 'false' }}"
          
          if [ "$FORCE" = "true" ]; then
            STRATEGY="full-rebuild"
            echo "🔄 Strategy: Full rebuild (forced refresh)"
          elif [ "$MODE" = "emergency-update" ]; then
            STRATEGY="emergency"
            echo "🚨 Strategy: Emergency update"
          else
            STRATEGY="$MODE"
            echo "🎯 Strategy: ${MODE^}"
          fi
          
          echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
          echo "::notice title=Enhancement Strategy::Selected: $STRATEGY"

      - name: 📊 Activity Scoring
        id: activity
        run: |
          # Advanced GitHub activity analysis
          COMMITS_30D=$(git log --since="30 days ago" --oneline | wc -l)
          COMMITS_7D=$(git log --since="7 days ago" --oneline | wc -l)
          ACTIVE_DAYS=$(git log --since="30 days ago" --format="%ad" --date=short | sort -u | wc -l)
          
          # Calculate velocity and consistency
          VELOCITY=$(echo "scale=2; $COMMITS_30D / 30" | bc -l)
          CONSISTENCY=$(echo "scale=2; $ACTIVE_DAYS / 30 * 100" | bc -l)
          
          # Comprehensive activity score
          ACTIVITY_SCORE=$(echo "scale=0; ($COMMITS_30D * 1.5) + ($ACTIVE_DAYS * 2) + ($COMMITS_7D * 0.5)" | bc -l)
          if (( $(echo "$ACTIVITY_SCORE > 100" | bc -l) )); then
            ACTIVITY_SCORE=100
          fi
          
          echo "📈 **Activity Analysis:**"
          echo "  • Commits (30d): $COMMITS_30D"
          echo "  • Commits (7d): $COMMITS_7D"
          echo "  • Active days: $ACTIVE_DAYS/30"
          echo "  • Velocity: $VELOCITY commits/day"
          echo "  • Consistency: $CONSISTENCY%"
          echo "  • Activity Score: $ACTIVITY_SCORE/100"
          
          echo "score=$ACTIVITY_SCORE" >> $GITHUB_OUTPUT
          echo "::notice title=Activity Score::$ACTIVITY_SCORE/100 (${CONSISTENCY}% consistency)"

      - name: 💰 Budget Analysis
        id: budget
        run: |
          STRATEGY="${{ steps.strategy.outputs.strategy }}"
          ACTIVITY="${{ steps.activity.outputs.score }}"
          
          # Intelligent budget allocation based on activity and strategy
          if [ "$STRATEGY" = "comprehensive" ] && (( $(echo "$ACTIVITY > 70" | bc -l) )); then
            BUDGET="sufficient"
            ESTIMATED_TOKENS=12000
          elif [ "$STRATEGY" = "emergency" ]; then
            BUDGET="limited"
            ESTIMATED_TOKENS=3000
          elif [ "$STRATEGY" = "activity-only" ]; then
            BUDGET="minimal"
            ESTIMATED_TOKENS=500
          else
            BUDGET="sufficient"
            ESTIMATED_TOKENS=8000
          fi
          
          echo "💰 Budget Analysis: $BUDGET ($ESTIMATED_TOKENS estimated tokens)"
          echo "budget=$BUDGET" >> $GITHUB_OUTPUT
          echo "tokens=$ESTIMATED_TOKENS" >> $GITHUB_OUTPUT
          echo "::notice title=Budget Allocation::$BUDGET ($ESTIMATED_TOKENS tokens)"

      - name: 💲 Cost Estimation
        id: cost
        run: |
          TOKENS="${{ steps.budget.outputs.tokens }}"
          
          # Cost calculation (Claude 3.5 Sonnet pricing)
          INPUT_COST=$(echo "scale=4; $TOKENS * 0.6 / 1000000 * 3" | bc -l)
          OUTPUT_COST=$(echo "scale=4; $TOKENS * 0.4 / 1000000 * 15" | bc -l)
          TOTAL_COST=$(echo "scale=4; $INPUT_COST + $OUTPUT_COST" | bc -l)
          
          echo "💲 **Cost Estimation:**"
          echo "  • Input tokens: $(echo "$TOKENS * 0.6 / 1" | bc -l | cut -d. -f1) @ \$$(printf "%.4f" $INPUT_COST)"
          echo "  • Output tokens: $(echo "$TOKENS * 0.4 / 1" | bc -l | cut -d. -f1) @ \$$(printf "%.4f" $OUTPUT_COST)"
          echo "  • Total estimated: \$$(printf "%.4f" $TOTAL_COST)"
          
          echo "estimated=$TOTAL_COST" >> $GITHUB_OUTPUT
          echo "::notice title=Estimated Cost::\$$(printf "%.4f" $TOTAL_COST)"

      - name: 🌍 Environment Configuration
        id: environment
        run: |
          ENV="${{ github.event.inputs.environment || 'production' }}"
          
          case "$ENV" in
            "production")
              TARGET_URL="${{ env.PROD_URL }}"
              DEPLOY_ENV="github-pages"
              ;;
            "staging")
              TARGET_URL="${{ env.STAGING_URL }}"
              DEPLOY_ENV="staging"
              ;;
            "preview")
              TARGET_URL="${{ env.PREVIEW_URL }}"
              DEPLOY_ENV="preview"
              ;;
            *)
              TARGET_URL="${{ env.PROD_URL }}"
              DEPLOY_ENV="github-pages"
              ;;
          esac
          
          echo "🌍 **Deployment Configuration:**"
          echo "  • Environment: $ENV"
          echo "  • Target URL: $TARGET_URL"
          echo "  • Deploy target: $DEPLOY_ENV"
          
          echo "target=$TARGET_URL" >> $GITHUB_OUTPUT
          echo "environment=$DEPLOY_ENV" >> $GITHUB_OUTPUT
          echo "::notice title=Deployment Target::$ENV → $TARGET_URL"

      - name: 🔢 Session Tracking
        id: session
        run: |
          SESSION_ID="cv-$(date +%Y%m%d-%H%M%S)-${GITHUB_RUN_NUMBER}"
          echo "🔢 Session ID: $SESSION_ID"
          echo "id=$SESSION_ID" >> $GITHUB_OUTPUT
          
      - name: 📝 Intelligence Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🧠 Intelligence Analysis Results
          
          | Analysis | Result |
          |----------|--------|
          | 🎯 Strategy | ${{ steps.strategy.outputs.strategy }} |
          | 📈 Activity Score | ${{ steps.activity.outputs.score }}/100 |
          | 💰 Budget Status | ${{ steps.budget.outputs.budget }} |
          | 💲 Est. Cost | \$${{ steps.cost.outputs.estimated }} |
          | 🌍 Target | ${{ steps.environment.outputs.target }} |
          | 🔢 Session | `${{ steps.session.outputs.id }}` |
          EOF

  # 📊 DATA COLLECTION & ANALYSIS
  data-collection:
    name: 📊 GitHub Data Mining
    runs-on: ubuntu-latest
    needs: intelligence-analysis
    outputs:
      data-status: ${{ steps.collection.outputs.status }}
      repo-count: ${{ steps.collection.outputs.repos }}
      languages: ${{ steps.collection.outputs.languages }}
    environment:
      name: data-collection
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: 📥 Repository Checkout
        uses: actions/checkout@v4

      - name: 🔧 Node.js Setup
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '.github/scripts/package-lock.json'

      - name: 📦 Dependencies Installation
        run: |
          echo "📦 **Installing Enhancement Dependencies**"
          cd .github/scripts
          npm ci --production
          echo "✅ Dependencies installed successfully"

      - name: 📊 Data Collection
        id: collection
        run: |
          echo "📊 **MINING GITHUB DATA**"
          cd .github/scripts
          
          # Run activity analyzer with timeout
          timeout 300 node activity-analyzer.js || {
            echo "⚠️ Activity analyzer timed out, using cached data"
          }
          
          # Check results
          if [ -f "../data/activity-summary.json" ]; then
            REPOS=$(jq -r '.summary.total_repositories // 0' ../data/activity-summary.json)
            LANGUAGES=$(jq -r '.summary.top_languages | length' ../data/activity-summary.json)
            STATUS="success"
            echo "✅ Data collection completed: $REPOS repos, $LANGUAGES languages"
          else
            REPOS=0
            LANGUAGES=0
            STATUS="partial"
            echo "⚠️ Partial data collection"
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "repos=$REPOS" >> $GITHUB_OUTPUT
          echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
          echo "::notice title=Data Collection::$REPOS repositories, $LANGUAGES languages ($STATUS)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 🤖 AI CONTENT ENHANCEMENT
  ai-enhancement:
    name: 🤖 AI Content Enhancement
    runs-on: ubuntu-latest
    needs: [intelligence-analysis, data-collection]
    outputs:
      enhancement-status: ${{ steps.enhancement.outputs.status }}
      tokens-used: ${{ steps.enhancement.outputs.tokens }}
      cost-actual: ${{ steps.enhancement.outputs.cost }}
      auth-method: ${{ steps.enhancement.outputs.auth_method }}
    environment:
      name: ai-enhancement
      url: https://console.anthropic.com/dashboard
    steps:
      - name: 📥 Repository Checkout
        uses: actions/checkout@v4

      - name: 🔧 Node.js Setup
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '.github/scripts/package-lock.json'

      - name: 📦 Dependencies Installation
        run: |
          cd .github/scripts
          npm ci --production

      - name: 🔐 Authentication Setup
        id: auth
        run: |
          echo "🔐 **CONFIGURING OAUTH-FIRST AUTHENTICATION**"
          cd .github/scripts
          
          # Test authentication status
          node claude-auth-manager.js status || {
            echo "⚠️ Authentication status check failed, using fallback"
          }
          
          # Determine active auth method
          if [ -n "${{ secrets.CLAUDE_OAUTH_TOKEN }}" ]; then
            AUTH_METHOD="oauth_max"
            echo "✅ Claude Max OAuth configured"
          elif [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            AUTH_METHOD="api_key"
            echo "✅ API key fallback configured"
          else
            AUTH_METHOD="none"
            echo "⚠️ No authentication available - using activity-only mode"
          fi
          
          echo "auth_method=$AUTH_METHOD" >> $GITHUB_OUTPUT
          echo "::notice title=Authentication::Using $AUTH_METHOD method"

      - name: 🤖 AI Enhancement Execution
        id: enhancement
        run: |
          echo "🤖 **EXECUTING AI CONTENT ENHANCEMENT**"
          cd .github/scripts
          
          # Execute enhancement with timeout and error handling
          START_TIME=$(date +%s)
          
          if timeout 600 node claude-enhancer.js 2>&1 | tee enhancement.log; then
            STATUS="success"
            echo "✅ AI enhancement completed successfully"
          else
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 124 ]; then
              STATUS="timeout"
              echo "⚠️ AI enhancement timed out (10 minutes)"
            else
              STATUS="partial"
              echo "⚠️ AI enhancement completed with errors (exit code: $EXIT_CODE)"
            fi
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          # Extract metrics from results
          if [ -f "../data/ai-enhancement-$(date +%Y-%m-%d)*.json" ]; then
            LATEST_RESULT=$(ls -t ../data/ai-enhancement-*.json | head -1)
            TOKENS=$(jq -r '.token_usage.total // 0' "$LATEST_RESULT")
            ACTUAL_COST=$(jq -r '.cost_analysis.total_cost // 0' "$LATEST_RESULT")
          else
            TOKENS=0
            ACTUAL_COST=0
          fi
          
          echo "📊 **Enhancement Results:**"
          echo "  • Status: $STATUS"
          echo "  • Duration: ${DURATION}s"
          echo "  • Tokens used: $TOKENS"
          echo "  • Actual cost: \$$(printf "%.4f" $ACTUAL_COST)"
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "tokens=$TOKENS" >> $GITHUB_OUTPUT
          echo "cost=$ACTUAL_COST" >> $GITHUB_OUTPUT
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          echo "::notice title=AI Enhancement::$STATUS - $TOKENS tokens, \$$(printf "%.4f" $ACTUAL_COST), ${DURATION}s"
        env:
          # OAuth-first authentication
          CLAUDE_OAUTH_TOKEN: ${{ secrets.CLAUDE_OAUTH_TOKEN }}
          CLAUDE_SUBSCRIPTION_TIER: ${{ secrets.CLAUDE_SUBSCRIPTION_TIER || 'max_5x' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AUTH_STRATEGY: oauth_first
          
          # Enhancement configuration
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AI_BUDGET: ${{ needs.intelligence-analysis.outputs.ai-budget }}
          CREATIVITY_LEVEL: ${{ github.event.inputs.ai_creativity || 'balanced' }}
          ACTIVITY_SCORE: ${{ needs.intelligence-analysis.outputs.activity-score }}
          ENHANCEMENT_MODE: ${{ github.event.inputs.enhancement_mode || 'comprehensive' }}

  # 🎨 WEBSITE GENERATION & BUILD
  website-build:
    name: 🎨 Website Generation
    runs-on: ubuntu-latest
    needs: [intelligence-analysis, data-collection, ai-enhancement]
    outputs:
      build-status: ${{ steps.build.outputs.status }}
      asset-count: ${{ steps.build.outputs.assets }}
      build-size: ${{ steps.build.outputs.size }}
      pdf-status: ${{ steps.pdf.outputs.status }}
    environment:
      name: website-build
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: 📥 Repository Checkout
        uses: actions/checkout@v4

      - name: 🔧 Node.js Setup
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '.github/scripts/package-lock.json'

      - name: 📦 Dependencies Installation
        run: |
          cd .github/scripts
          npm ci --production

      - name: 🎨 Website Generation
        id: build
        run: |
          echo "🎨 **GENERATING DYNAMIC CV WEBSITE**"
          
          mkdir -p dist
          cd .github/scripts
          
          # Generate website with enhanced error handling
          if timeout 300 node cv-generator.js; then
            BUILD_STATUS="success"
            echo "✅ Website generated successfully"
          else
            BUILD_STATUS="fallback"
            echo "⚠️ Using fallback website generation"
            
            # Implement intelligent fallback
            cd ../..
            cp index.html dist/ 2>/dev/null || true
            cp -r assets dist/ 2>/dev/null || true
            cp -r data dist/ 2>/dev/null || true
          fi
          
          # Analyze build results
          if [ -d "../../dist" ]; then
            ASSET_COUNT=$(find ../../dist -type f | wc -l)
            BUILD_SIZE=$(du -sh ../../dist | cut -f1)
            echo "📊 Build results: $ASSET_COUNT files, $BUILD_SIZE total"
          else
            ASSET_COUNT=0
            BUILD_SIZE="0"
          fi
          
          echo "status=$BUILD_STATUS" >> $GITHUB_OUTPUT
          echo "assets=$ASSET_COUNT" >> $GITHUB_OUTPUT
          echo "size=$BUILD_SIZE" >> $GITHUB_OUTPUT
          echo "::notice title=Website Build::$BUILD_STATUS - $ASSET_COUNT assets, $BUILD_SIZE"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📄 PDF Generation Verification
        id: pdf
        run: |
          echo "📄 **VERIFYING PDF GENERATION**"
          
          if [ -f "dist/assets/adrian-wedd-cv.pdf" ]; then
            PDF_SIZE=$(ls -lh dist/assets/adrian-wedd-cv.pdf | awk '{print $5}')
            PDF_STATUS="generated"
            echo "✅ PDF generated successfully ($PDF_SIZE)"
          else
            PDF_STATUS="missing"
            echo "⚠️ PDF not generated - download feature unavailable"
          fi
          
          echo "status=$PDF_STATUS" >> $GITHUB_OUTPUT
          echo "::notice title=PDF Status::$PDF_STATUS"

      - name: ✅ Asset Validation
        run: |
          echo "✅ **VALIDATING GENERATED ASSETS**"
          
          # HTML validation
          if [ -f "dist/index.html" ]; then
            echo "✅ index.html present"
          else
            echo "❌ index.html missing"
          fi
          
          # CSS validation
          if [ -f "dist/assets/styles.css" ]; then
            echo "✅ styles.css present"
          else
            echo "⚠️ styles.css missing"
          fi
          
          # JavaScript validation
          if [ -f "dist/assets/script.js" ]; then
            echo "✅ script.js present"
          else
            echo "⚠️ script.js missing"
          fi

      - name: 📦 Build Artifact Upload
        uses: actions/upload-artifact@v4
        with:
          name: cv-website-${{ needs.intelligence-analysis.outputs.session-id }}
          path: dist/
          retention-days: 30

  # 🌐 MULTI-ENVIRONMENT DEPLOYMENT
  deployment:
    name: 🌐 Multi-Environment Deploy
    runs-on: ubuntu-latest
    needs: [intelligence-analysis, website-build]
    outputs:
      deployment-url: ${{ steps.deploy.outputs.page_url }}
      environment: ${{ steps.deploy.outputs.environment }}
      deploy-time: ${{ steps.deploy.outputs.deploy_time }}
    environment:
      name: ${{ needs.intelligence-analysis.outputs.deployment-target }}
      url: ${{ needs.intelligence-analysis.outputs.target }}
    steps:
      - name: 📥 Repository Checkout
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: cv-website-${{ needs.intelligence-analysis.outputs.session-id }}
          path: dist/

      - name: 🌐 GitHub Pages Deployment
        id: deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: ${{ secrets.CUSTOM_DOMAIN }}
        env:
          DEPLOY_START: ${{ steps.deploy-start.outputs.time }}

      - name: 📊 Deployment Verification
        run: |
          echo "📊 **DEPLOYMENT VERIFICATION**"
          
          DEPLOY_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          TARGET_URL="${{ needs.intelligence-analysis.outputs.target }}"
          
          echo "🌐 **Deployment Results:**"
          echo "  • Environment: ${{ needs.intelligence-analysis.outputs.deployment-target }}"
          echo "  • Target URL: $TARGET_URL"
          echo "  • Deploy time: $DEPLOY_TIME"
          echo "  • Build status: ${{ needs.website-build.outputs.build-status }}"
          echo "  • Asset count: ${{ needs.website-build.outputs.asset-count }}"
          
          echo "deploy_time=$DEPLOY_TIME" >> $GITHUB_OUTPUT
          echo "environment=${{ needs.intelligence-analysis.outputs.deployment-target }}" >> $GITHUB_OUTPUT
          echo "::notice title=Deployment Complete::$TARGET_URL (${{ needs.intelligence-analysis.outputs.deployment-target }})"

  # 📈 ANALYTICS & REPORTING
  analytics-reporting:
    name: 📈 Analytics & Performance
    runs-on: ubuntu-latest
    needs: [intelligence-analysis, data-collection, ai-enhancement, website-build, deployment]
    if: always()
    environment:
      name: analytics
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: 📥 Repository Checkout
        uses: actions/checkout@v4

      - name: 🔧 Node.js Setup
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '.github/scripts/package-lock.json'

      - name: 📦 Dependencies Installation
        run: |
          cd .github/scripts
          npm ci --production

      - name: 📊 Usage Analytics Recording
        run: |
          echo "📊 **RECORDING COMPREHENSIVE ANALYTICS**"
          cd .github/scripts
          
          # Record session with enhanced metrics
          node usage-monitor.js record-session \
            --session-id="${{ needs.intelligence-analysis.outputs.session-id }}" \
            --mode="${{ github.event.inputs.enhancement_mode || 'comprehensive' }}" \
            --strategy="${{ needs.intelligence-analysis.outputs.enhancement-strategy }}" \
            --activity-score="${{ needs.intelligence-analysis.outputs.activity-score }}" \
            --tokens-used="${{ needs.ai-enhancement.outputs.tokens-used || 0 }}" \
            --cost-actual="${{ needs.ai-enhancement.outputs.cost-actual || 0 }}" \
            --auth-method="${{ needs.ai-enhancement.outputs.auth-method }}" \
            --build-status="${{ needs.website-build.outputs.build-status }}" \
            --deployment-url="${{ needs.deployment.outputs.deployment-url }}" \
            --environment="${{ needs.deployment.outputs.environment }}" || {
            echo "⚠️ Analytics recording failed, creating manual entry"
          }

      - name: 📈 Performance Analysis
        run: |
          echo "📈 **PERFORMANCE ANALYSIS SUMMARY**"
          
          # Calculate pipeline metrics
          TOTAL_JOBS=6
          SUCCESSFUL_JOBS=$(echo "${{ needs.intelligence-analysis.result == 'success' }} + \
                                  ${{ needs.data-collection.result == 'success' }} + \
                                  ${{ needs.ai-enhancement.result == 'success' }} + \
                                  ${{ needs.website-build.result == 'success' }} + \
                                  ${{ needs.deployment.result == 'success' }}" | bc)
          SUCCESS_RATE=$(echo "scale=1; $SUCCESSFUL_JOBS / $TOTAL_JOBS * 100" | bc)
          
          echo "🎯 **Pipeline Performance:**"
          echo "  • Success rate: $SUCCESS_RATE% ($SUCCESSFUL_JOBS/$TOTAL_JOBS jobs)"
          echo "  • Session ID: ${{ needs.intelligence-analysis.outputs.session-id }}"
          echo "  • Activity score: ${{ needs.intelligence-analysis.outputs.activity-score }}/100"
          echo "  • Estimated cost: \$${{ needs.intelligence-analysis.outputs.estimated-cost }}"
          echo "  • Actual cost: \$${{ needs.ai-enhancement.outputs.cost-actual || '0.0000' }}"
          echo "  • Tokens used: ${{ needs.ai-enhancement.outputs.tokens-used || 0 }}"
          echo "  • Build assets: ${{ needs.website-build.outputs.asset-count }}"
          echo "  • Build size: ${{ needs.website-build.outputs.build-size }}"
          echo "  • Deployment: ${{ needs.deployment.outputs.deployment-url }}"
          
          echo "::notice title=Pipeline Success::$SUCCESS_RATE% success rate"

      - name: 🚀 Workflow Summary
        run: |
          echo "🚀 **CV ENHANCEMENT PIPELINE COMPLETED**"
          echo ""
          echo "📊 **Final Results:**"
          echo "  🎯 Strategy: ${{ needs.intelligence-analysis.outputs.enhancement-strategy }}"
          echo "  📈 Activity: ${{ needs.intelligence-analysis.outputs.activity-score }}/100"
          echo "  🤖 AI Status: ${{ needs.ai-enhancement.outputs.enhancement-status }}"
          echo "  🎨 Build: ${{ needs.website-build.outputs.build-status }}"
          echo "  🌐 Deployment: ${{ needs.deployment.outputs.environment }}"
          echo "  💰 Cost: \$${{ needs.ai-enhancement.outputs.cost-actual || '0.0000' }}"
          echo "  🔗 URL: ${{ needs.deployment.outputs.deployment-url }}"
          echo ""
          echo "✅ **CV Successfully Enhanced and Deployed!**"
          
          # Write comprehensive summary to GitHub Actions UI
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 🚀 CV Enhancement Pipeline Summary
          
          ## 📊 Pipeline Metrics
          | Metric | Value |
          |--------|-------|
          | 🎯 **Enhancement Strategy** | ${{ needs.intelligence-analysis.outputs.enhancement-strategy }} |
          | 📈 **Activity Score** | ${{ needs.intelligence-analysis.outputs.activity-score }}/100 |
          | 🏢 **Repositories Analyzed** | ${{ needs.data-collection.outputs.repo-count }} |
          | 💻 **Languages** | ${{ needs.data-collection.outputs.languages }} |
          | 🤖 **AI Enhancement** | ${{ needs.ai-enhancement.outputs.enhancement-status }} |
          | 🔐 **Auth Method** | ${{ needs.ai-enhancement.outputs.auth-method }} |
          | 💰 **Estimated Cost** | \$${{ needs.intelligence-analysis.outputs.estimated-cost }} |
          | 💸 **Actual Cost** | \$${{ needs.ai-enhancement.outputs.cost-actual || '0.0000' }} |
          | 🔢 **Tokens Used** | ${{ needs.ai-enhancement.outputs.tokens-used || 0 }} |
          | 📦 **Build Assets** | ${{ needs.website-build.outputs.asset-count }} |
          | 📏 **Build Size** | ${{ needs.website-build.outputs.build-size }} |
          | 📄 **PDF Status** | ${{ needs.website-build.outputs.pdf-status }} |
          
          ## 🌐 Deployment Information
          - **Environment**: `${{ needs.deployment.outputs.environment }}`
          - **Live URL**: [${{ needs.deployment.outputs.deployment-url }}](${{ needs.deployment.outputs.deployment-url }})
          - **Deploy Time**: ${{ needs.deployment.outputs.deploy-time }}
          
          ## 🔗 Quick Links
          - 🌐 [Live CV](${{ needs.deployment.outputs.deployment-url }})
          - 📊 [Status Dashboard](${{ needs.deployment.outputs.deployment-url }}/status-dashboard.html)
          - 📈 [Activity Tracker](${{ needs.deployment.outputs.deployment-url }}/watch-me-work.html)
          - 📄 [PDF Download](${{ needs.deployment.outputs.deployment-url }}/assets/adrian-wedd-cv.pdf)
          
          ## 📈 Success Metrics
          - **Pipeline Success Rate**: $SUCCESS_RATE%
          - **Session ID**: `${{ needs.intelligence-analysis.outputs.session-id }}`
          - **Enhancement Mode**: ${{ github.event.inputs.enhancement_mode || 'comprehensive' }}
          
          ---
          > 🤖 Generated with [Claude Code](https://claude.ai/code)
          EOF

      - name: 💾 Commit Analytics Data
        run: |
          echo "💾 **COMMITTING ANALYTICS UPDATES**"
          
          git config --local user.email "cv-analytics@adrianwedd.com"
          git config --local user.name "CV Analytics Bot"
          
          # Check for changes
          if git diff --quiet && git diff --staged --quiet; then
            echo "ℹ️ No analytics changes to commit"
          else
            git add data/
            git commit -m "📊 Analytics update: Session ${{ needs.intelligence-analysis.outputs.session-id }}

🎯 Enhancement: ${{ needs.intelligence-analysis.outputs.enhancement-strategy }}
📈 Activity Score: ${{ needs.intelligence-analysis.outputs.activity-score }}/100
🤖 AI Tokens: ${{ needs.ai-enhancement.outputs.tokens-used || 0 }}
💰 Cost: \$${{ needs.ai-enhancement.outputs.cost-actual || '0.0000' }}
🌐 Environment: ${{ needs.deployment.outputs.environment }}

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>" || {
              echo "⚠️ Commit failed, possibly no changes or conflict"
            }
            
            git push || {
              echo "⚠️ Push failed, possibly due to concurrent modifications"
            }
          fi