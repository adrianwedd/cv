name: 📚 Documentation & Runbook Generator

# Automated generation of deployment documentation, operational runbooks,
# system architecture diagrams, and troubleshooting guides

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/**'
      - '.github/scripts/**'
      - 'infrastructure/**'
  schedule:
    # Weekly documentation updates on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      documentation_type:
        description: 'Type of documentation to generate'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - deployment-only
          - operational-only
          - troubleshooting-only
          - architecture-only
      update_existing:
        description: 'Update existing documentation'
        required: false
        default: true
        type: boolean

env:
  DOCUMENTATION_VERSION: "v2.0"
  DOCS_OUTPUT_DIR: "docs/generated"
  ARCHITECTURE_TOOLS: "mermaid"

jobs:
  # ==========================================
  # SYSTEM ARCHITECTURE DOCUMENTATION
  # ==========================================
  architecture_documentation:
    name: 🏗️ System Architecture Documentation
    runs-on: ubuntu-latest
    
    outputs:
      architecture_generated: ${{ steps.architecture_gen.outputs.generated }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: 🏗️ Generate System Architecture Documentation
        id: architecture_gen
        run: |
          echo "🏗️ **SYSTEM ARCHITECTURE DOCUMENTATION GENERATION**"
          
          mkdir -p ${{ env.DOCS_OUTPUT_DIR }}/architecture
          
          # Create comprehensive system architecture document
          cat > ${{ env.DOCS_OUTPUT_DIR }}/architecture/system-overview.md << 'EOF'
          # 🏗️ CV System Architecture Overview
          
          ## System Components
          
          ```mermaid
          graph TB
              subgraph "GitHub Infrastructure"
                  REPO[Repository: adrianwedd/cv]
                  ACTIONS[GitHub Actions CI/CD]
                  PAGES[GitHub Pages Hosting]
                  SECRETS[GitHub Secrets Management]
              end
              
              subgraph "CI/CD Pipeline"
                  BUILD[Build Pipeline]
                  TEST[Testing Pipeline]
                  SECURITY[Security Scanning]
                  DEPLOY[Deployment Pipeline]
              end
              
              subgraph "Monitoring & Observability"
                  MONITORING[Deployment Monitoring]
                  PERFORMANCE[Performance Testing]
                  ALERTS[Alerting System]
                  LOGS[Logging & Analytics]
              end
              
              subgraph "Content Generation"
                  ACTIVITY[Activity Analyzer]
                  AI[Claude AI Enhancement]
                  GENERATOR[CV Generator]
                  FORMATS[Multi-Format Export]
              end
              
              subgraph "User Interface"
                  WEBSITE[Static Website]
                  DASHBOARD[Career Intelligence Dashboard]
                  WATCH[Watch Me Work Dashboard]
                  MOBILE[Mobile Responsive]
              end
              
              REPO --> ACTIONS
              ACTIONS --> BUILD
              BUILD --> TEST
              TEST --> SECURITY
              SECURITY --> DEPLOY
              DEPLOY --> PAGES
              
              ACTIVITY --> AI
              AI --> GENERATOR
              GENERATOR --> FORMATS
              FORMATS --> WEBSITE
              
              PAGES --> MONITORING
              MONITORING --> PERFORMANCE
              PERFORMANCE --> ALERTS
              ALERTS --> LOGS
              
              WEBSITE --> DASHBOARD
              DASHBOARD --> WATCH
              WATCH --> MOBILE
          ```
          
          ## Data Flow Architecture
          
          ```mermaid
          sequenceDiagram
              participant Dev as Developer
              participant GH as GitHub
              participant CI as CI/CD Pipeline
              participant AI as Claude AI
              participant Pages as GitHub Pages
              participant Monitor as Monitoring
              
              Dev->>GH: Push Code
              GH->>CI: Trigger Workflow
              CI->>CI: Quality Gates
              CI->>AI: Content Enhancement
              AI-->>CI: Enhanced Content
              CI->>CI: Generate Assets
              CI->>Pages: Deploy
              Pages-->>Monitor: Health Check
              Monitor-->>Dev: Status Report
          ```
          
          ## Technology Stack
          
          ### Frontend
          - **HTML5**: Semantic markup with modern standards
          - **CSS3**: Grid/Flexbox with custom properties
          - **JavaScript ES6+**: Progressive enhancement
          - **Service Worker**: PWA capabilities and caching
          
          ### Backend & Infrastructure
          - **GitHub Actions**: CI/CD automation
          - **Node.js**: Build tools and scripting
          - **GitHub Pages**: Static site hosting
          - **Claude AI**: Content enhancement
          
          ### Development Tools
          - **ESLint**: Code quality and security
          - **Playwright**: Cross-browser testing
          - **Lighthouse**: Performance auditing
          - **Terraform**: Infrastructure as Code
          
          ### Monitoring & Analytics
          - **Custom Monitoring**: Performance tracking
          - **Health Checks**: Availability monitoring
          - **Error Tracking**: Automated alerting
          - **Performance Budgets**: Quality gates
          
          ## Security Architecture
          
          ### Authentication & Authorization
          - **GitHub Secrets**: Encrypted credential storage
          - **OAuth Integration**: Claude AI authentication
          - **API Key Management**: Secure API access
          - **RBAC**: Role-based access control
          
          ### Security Layers
          1. **Network Security**: HTTPS enforcement, CSP headers
          2. **Application Security**: Input validation, XSS protection
          3. **Infrastructure Security**: Secure CI/CD pipelines
          4. **Data Security**: Encrypted secrets, secure APIs
          
          ### Compliance
          - **WCAG 2.1 AA**: Accessibility compliance
          - **Security Headers**: Content Security Policy implementation
          - **Vulnerability Scanning**: Automated dependency auditing
          - **Code Security**: Static analysis and secret detection
          
          ## Scalability & Performance
          
          ### Performance Optimizations
          - **Asset Optimization**: Minification and compression
          - **Lazy Loading**: Progressive content loading
          - **Service Worker**: Aggressive caching strategy
          - **CDN**: GitHub Pages global distribution
          
          ### Scalability Patterns
          - **Static Generation**: Pre-built assets
          - **Progressive Enhancement**: Core functionality first
          - **Responsive Design**: Mobile-first approach
          - **Performance Budgets**: Automated quality gates
          
          ## Disaster Recovery
          
          ### Backup Strategy
          - **Git Version Control**: Complete history backup
          - **Multi-Environment**: Development, staging, production
          - **Automated Rollback**: Blue-green deployment strategy
          - **Infrastructure as Code**: Reproducible infrastructure
          
          ### Recovery Procedures
          1. **Automated Rollback**: 30-second recovery time
          2. **Manual Recovery**: Step-by-step procedures documented
          3. **Data Recovery**: Git history and GitHub backups
          4. **Infrastructure Recovery**: Terraform-based restoration
          
          ---
          *Generated on $(date -u +"%Y-%m-%d %H:%M UTC") by CV System Architecture Documentation v${{ env.DOCUMENTATION_VERSION }}*
          EOF
          
          # Create deployment architecture diagram
          cat > ${{ env.DOCS_OUTPUT_DIR }}/architecture/deployment-flow.md << 'EOF'
          # 🚀 Deployment Architecture & Flow
          
          ## Deployment Pipeline Architecture
          
          ```mermaid
          graph LR
              subgraph "Source Control"
                  A[Developer Commit]
                  B[Pull Request]
                  C[Code Review]
              end
              
              subgraph "CI/CD Pipeline"
                  D[Quality Gates]
                  E[Security Scanning]
                  F[Performance Testing]
                  G[Build Assets]
              end
              
              subgraph "Deployment Strategy"
                  H[Blue-Green Deploy]
                  I[Health Checks]
                  J[Traffic Switch]
                  K[Monitoring]
              end
              
              subgraph "Environments"
                  L[Development]
                  M[Staging]
                  N[Production]
              end
              
              A --> D
              B --> D
              C --> D
              D --> E
              E --> F
              F --> G
              G --> H
              H --> I
              I --> J
              J --> K
              
              D --> L
              G --> M
              K --> N
          ```
          
          ## Multi-Environment Strategy
          
          | Environment | Purpose | Deployment | Approvals | Monitoring |
          |-------------|---------|------------|-----------|------------|
          | **Development** | Feature development | Auto | None | Basic |
          | **Staging** | Pre-production testing | Auto | 1 reviewer | Enhanced |
          | **Production** | Live system | Manual/Scheduled | 2 reviewers | Comprehensive |
          
          ## Deployment Windows
          
          ### Production Deployment Schedule
          - **Preferred Window**: 09:00-17:00 UTC (Business hours)
          - **Emergency Deployments**: Available 24/7 with proper approval
          - **Maintenance Window**: Sundays 02:00-04:00 UTC
          - **Freeze Periods**: Major holidays, critical business events
          
          ### Rollback Strategy
          
          ```mermaid
          graph TD
              START[Deployment Started]
              HEALTH[Health Check]
              SUCCESS{Health OK?}
              COMPLETE[Deployment Complete]
              ROLLBACK[Automated Rollback]
              MANUAL[Manual Investigation]
              
              START --> HEALTH
              HEALTH --> SUCCESS
              SUCCESS -->|Yes| COMPLETE
              SUCCESS -->|No| ROLLBACK
              ROLLBACK --> MANUAL
          ```
          
          **Rollback Triggers:**
          - HTTP error rate > 0.1%
          - Response time > 2000ms average
          - Availability < 99%
          - Critical JavaScript errors
          
          **Recovery Time Objectives:**
          - **Automated Rollback**: < 30 seconds
          - **Manual Rollback**: < 5 minutes
          - **Full Recovery**: < 15 minutes
          - **Root Cause Analysis**: < 2 hours
          
          ---
          *Generated on $(date -u +"%Y-%m-%d %H:%M UTC") by Deployment Architecture Documentation v${{ env.DOCUMENTATION_VERSION }}*
          EOF
          
          echo "generated=true" >> $GITHUB_OUTPUT
          echo "✅ System architecture documentation generated"
          
      - name: 📤 Upload Architecture Documentation
        uses: actions/upload-artifact@v4
        with:
          name: architecture-documentation
          path: ${{ env.DOCS_OUTPUT_DIR }}/architecture/

  # ==========================================
  # OPERATIONAL RUNBOOKS
  # ==========================================
  operational_runbooks:
    name: 📋 Operational Runbooks Generation
    runs-on: ubuntu-latest
    
    outputs:
      runbooks_generated: ${{ steps.runbooks_gen.outputs.generated }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 📋 Generate Operational Runbooks
        id: runbooks_gen
        run: |
          echo "📋 **OPERATIONAL RUNBOOKS GENERATION**"
          
          mkdir -p ${{ env.DOCS_OUTPUT_DIR }}/runbooks
          
          # Create incident response runbook
          cat > ${{ env.DOCS_OUTPUT_DIR }}/runbooks/incident-response.md << 'EOF'
          # 🚨 Incident Response Runbook
          
          ## Severity Classifications
          
          | Severity | Description | Response Time | Escalation |
          |----------|-------------|---------------|------------|
          | **P0 - Critical** | Site down, data loss | 5 minutes | Immediate |
          | **P1 - High** | Major functionality broken | 30 minutes | Within 1 hour |
          | **P2 - Medium** | Minor functionality issues | 2 hours | Next business day |
          | **P3 - Low** | Cosmetic issues | 1 business day | Weekly review |
          
          ## P0 Critical Incident Response
          
          ### Immediate Actions (0-5 minutes)
          
          1. **🚨 Acknowledge Incident**
             ```bash
             # Check system status
             curl -I https://adrianwedd.github.io/cv
             
             # Verify multiple endpoints
             curl -I https://adrianwedd.github.io/cv/career-intelligence-dashboard.html
             curl -I https://adrianwedd.github.io/cv/watch-me-work-dashboard.html
             ```
          
          2. **📊 Assess Impact**
             - Check monitoring dashboards
             - Verify error rates and response times
             - Identify affected user segments
          
          3. **🔄 Immediate Mitigation**
             ```bash
             # Trigger emergency rollback if available
             gh workflow run "🌊 Blue-Green Zero-Downtime Deployment" \
               --field action=rollback \
               --field environment=production
             ```
          
          ### Investigation Phase (5-30 minutes)
          
          1. **🔍 Root Cause Analysis**
             - Review recent deployments
             - Check GitHub Actions workflow logs
             - Analyze performance monitoring data
             - Review security scanning results
          
          2. **📝 Document Findings**
             - Create incident tracking issue
             - Document timeline of events
             - Identify contributing factors
          
          3. **🛠️ Implement Fix**
             - Apply immediate workaround if available
             - Prepare permanent fix
             - Test fix in staging environment
          
          ### Recovery Phase (30-60 minutes)
          
          1. **🚀 Deploy Fix**
             ```bash
             # Deploy to staging first
             gh workflow run "🚀 Staging Environment Deployment" \
               --ref fix-branch
             
             # After validation, deploy to production
             gh workflow run "🚀 Production CV Enhancement Pipeline" \
               --ref fix-branch
             ```
          
          2. **✅ Verify Resolution**
             - Run comprehensive health checks
             - Monitor system performance
             - Confirm user experience restoration
          
          3. **📢 Communication**
             - Update stakeholders
             - Post incident resolution
             - Schedule post-mortem meeting
          
          ### Post-Incident Actions (1-24 hours)
          
          1. **📊 Post-Mortem Analysis**
             - Document root cause
             - Identify prevention measures
             - Update monitoring and alerting
          
          2. **🔧 Process Improvements**
             - Update runbooks
             - Enhance monitoring coverage
             - Implement additional safeguards
          
          ## Common Issues & Quick Fixes
          
          ### Site Not Loading (P0)
          
          **Symptoms:**
          - HTTP 5xx errors
          - DNS resolution failures
          - Complete site unavailability
          
          **Quick Diagnosis:**
          ```bash
          # Check GitHub Pages status
          curl -I https://adrianwedd.github.io/cv
          
          # Check DNS resolution
          nslookup adrianwedd.github.io
          
          # Check workflow status
          gh run list --workflow="🚀 Production CV Enhancement Pipeline" --limit=5
          ```
          
          **Quick Fix:**
          ```bash
          # Trigger emergency rebuild
          gh workflow run "🚀 Production CV Enhancement Pipeline" \
            --field enhancement_mode=emergency-update
          ```
          
          ### Performance Degradation (P1)
          
          **Symptoms:**
          - Response times > 5 seconds
          - Lighthouse scores < 70
          - High error rates
          
          **Quick Diagnosis:**
          ```bash
          # Run performance test
          gh workflow run "⚡ Performance Testing & Analytics Pipeline" \
            --field test_intensity=comprehensive
          
          # Check CDN status
          curl -I -H "Cache-Control: no-cache" https://adrianwedd.github.io/cv
          ```
          
          **Quick Fix:**
          - Clear CDN cache if possible
          - Revert to previous deployment if performance regression detected
          - Scale resources if infrastructure bottleneck
          
          ### Security Alert (P0/P1)
          
          **Symptoms:**
          - Security scanning failures
          - Vulnerability alerts
          - Suspicious access patterns
          
          **Immediate Actions:**
          ```bash
          # Run security scan
          gh workflow run "🛡️ Enterprise Security Scanning Pipeline"
          
          # Check for exposed secrets
          git log --grep="secret\|password\|key" --all
          
          # Review access logs
          # (GitHub Pages doesn't provide detailed logs, but check Actions logs)
          ```
          
          ## Emergency Contacts
          
          | Role | Contact | Availability |
          |------|---------|--------------|
          | **Primary On-Call** | System Owner | 24/7 |
          | **Secondary On-Call** | Backup Engineer | Business hours |
          | **Security Contact** | Security Team | 24/7 for P0 |
          | **Management** | Engineering Manager | Business hours |
          
          ## Escalation Matrix
          
          ```mermaid
          graph TD
              ALERT[Alert Triggered]
              PRIMARY[Primary On-Call]
              SECONDARY[Secondary On-Call]
              MANAGER[Engineering Manager]
              EXEC[Executive Team]
              
              ALERT --> PRIMARY
              PRIMARY -->|No Response 15min| SECONDARY
              SECONDARY -->|No Response 30min| MANAGER
              MANAGER -->|P0 > 1hr| EXEC
          ```
          
          ---
          *Last Updated: $(date -u +"%Y-%m-%d %H:%M UTC") | Version: ${{ env.DOCUMENTATION_VERSION }}*
          EOF
          
          # Create deployment runbook
          cat > ${{ env.DOCS_OUTPUT_DIR }}/runbooks/deployment-procedures.md << 'EOF'
          # 🚀 Deployment Procedures Runbook
          
          ## Standard Deployment Process
          
          ### Pre-Deployment Checklist
          
          - [ ] **Code Review**: All changes reviewed and approved
          - [ ] **Testing**: All tests passing in CI pipeline
          - [ ] **Security**: Security scanning completed without critical issues
          - [ ] **Performance**: Performance budgets met
          - [ ] **Documentation**: Changes documented and runbooks updated
          - [ ] **Rollback Plan**: Rollback strategy confirmed and tested
          
          ### Development Environment Deployment
          
          **Trigger:** Automatic on push to develop branch
          
          ```bash
          # Manual trigger if needed
          gh workflow run "🚀 Staging Environment Deployment" \
            --ref develop \
            --field force_full_rebuild=true
          ```
          
          **Verification Steps:**
          1. Check deployment status: `gh run list --workflow="🚀 Staging Environment Deployment"`
          2. Verify staging URL: https://adrianwedd.github.io/cv-staging
          3. Run smoke tests on staging environment
          
          ### Staging Environment Deployment
          
          **Trigger:** Manual or scheduled for staging validation
          
          ```bash
          # Deploy to staging
          gh workflow run "🚀 Staging Environment Deployment" \
            --ref main \
            --field enhancement_mode=comprehensive
          ```
          
          **Validation Process:**
          1. **Functional Testing**: Verify all features work
          2. **Performance Testing**: Run Lighthouse audits
          3. **Security Testing**: Confirm no security regressions
          4. **User Acceptance Testing**: Stakeholder sign-off
          
          ### Production Deployment
          
          **Trigger:** Manual deployment with approval process
          
          ```bash
          # Production deployment with blue-green strategy
          gh workflow run "🌊 Blue-Green Zero-Downtime Deployment" \
            --ref main \
            --field environment=production \
            --field blue_green_strategy=instant \
            --field health_check_timeout=300
          ```
          
          **Production Deployment Steps:**
          
          1. **Pre-Deployment**
             - [ ] Stakeholder notification
             - [ ] Rollback plan confirmed
             - [ ] Monitoring alerts enabled
             - [ ] Support team notified
          
          2. **Deployment Execution**
             - [ ] Deploy to inactive slot (blue/green)
             - [ ] Run health checks on new deployment
             - [ ] Performance validation
             - [ ] Security verification
          
          3. **Traffic Switch**
             - [ ] Gradual traffic migration (if specified)
             - [ ] Monitor error rates and performance
             - [ ] Confirm user experience
             - [ ] Complete traffic switch
          
          4. **Post-Deployment**
             - [ ] Monitor system for 30 minutes
             - [ ] Verify all functionality
             - [ ] Update deployment tracking
             - [ ] Send completion notification
          
          ## Emergency Deployment Procedures
          
          ### Critical Security Fix
          
          **Authorization Required:** Security team approval
          
          ```bash
          # Emergency security deployment
          gh workflow run "🚀 Production CV Enhancement Pipeline" \
            --ref security-fix \
            --field enhancement_mode=emergency-update \
            --field force_refresh=true
          ```
          
          **Process:**
          1. **Immediate Assessment**: Confirm security criticality
          2. **Expedited Testing**: Run security scans and critical tests
          3. **Fast-Track Approval**: Security team emergency approval
          4. **Rapid Deployment**: Deploy with minimal delay
          5. **Enhanced Monitoring**: Increased monitoring post-deployment
          
          ### Performance Emergency
          
          **Trigger:** Site performance critically degraded
          
          ```bash
          # Performance emergency deployment
          gh workflow run "⚡ Performance Testing & Analytics Pipeline" \
            --field test_intensity=stress \
            --field target_environment=production
          
          # If performance fix available
          gh workflow run "🌊 Blue-Green Zero-Downtime Deployment" \
            --ref performance-fix \
            --field environment=production
          ```
          
          ## Rollback Procedures
          
          ### Automated Rollback
          
          **Triggers:**
          - Health check failures
          - Error rate > 0.1%
          - Response time > 2000ms
          - Critical JavaScript errors
          
          ```bash
          # Manual rollback trigger
          gh workflow run "🌊 Blue-Green Zero-Downtime Deployment" \
            --field action=rollback \
            --field environment=production
          ```
          
          ### Manual Rollback
          
          **When Automated Rollback Fails:**
          
          1. **Immediate Actions**
             ```bash
             # Check current deployment status
             gh run list --workflow="Blue-Green" --limit=5
             
             # Force rollback to previous known good commit
             git checkout HEAD~1
             gh workflow run "🚀 Production CV Enhancement Pipeline" \
               --field enhancement_mode=emergency-update
             ```
          
          2. **Verification**
             - Confirm site accessibility
             - Verify performance metrics
             - Check error rates
             - Test critical user journeys
          
          3. **Communication**
             - Notify stakeholders of rollback
             - Document rollback reason
             - Plan forward fix strategy
          
          ## Deployment Environments
          
          ### Environment Configuration
          
          | Environment | URL | Branch | Auto-Deploy | Approvals |
          |-------------|-----|--------|-------------|-----------|
          | **Development** | dev-cv.adrianwedd.com | develop | ✅ | None |
          | **Staging** | staging-cv.adrianwedd.com | main | ✅ | 1 |
          | **Production** | adrianwedd.github.io/cv | main | ❌ | 2 |
          
          ### Environment-Specific Commands
          
          ```bash
          # Development deployment
          gh workflow run "🚀 Staging Environment Deployment" \
            --ref develop
          
          # Staging deployment
          gh workflow run "🚀 Staging Environment Deployment" \
            --ref main
          
          # Production deployment
          gh workflow run "🌊 Blue-Green Zero-Downtime Deployment" \
            --ref main \
            --field environment=production
          ```
          
          ## Monitoring & Alerts
          
          ### Key Metrics to Monitor
          
          - **Availability**: > 99.9%
          - **Response Time**: < 2000ms
          - **Error Rate**: < 0.1%
          - **Lighthouse Score**: > 85
          - **Core Web Vitals**: All green
          
          ### Alert Escalation
          
          1. **Warning Alerts**: Slack notification
          2. **Critical Alerts**: PagerDuty + SMS
          3. **Emergency Alerts**: Phone call + email
          
          ### Monitoring Commands
          
          ```bash
          # Run monitoring check
          gh workflow run "📊 Deployment Monitoring & Observability"
          
          # Performance analysis
          gh workflow run "⚡ Performance Testing & Analytics Pipeline"
          
          # Security scan
          gh workflow run "🛡️ Enterprise Security Scanning Pipeline"
          ```
          
          ## Troubleshooting Common Issues
          
          ### Deployment Failures
          
          **Symptoms:** Workflow fails, deployment doesn't complete
          
          **Resolution:**
          ```bash
          # Check workflow logs
          gh run view --log
          
          # Re-run failed jobs
          gh run rerun --failed
          
          # Full workflow restart
          gh workflow run "🚀 Production CV Enhancement Pipeline"
          ```
          
          ### Asset Loading Issues
          
          **Symptoms:** CSS/JS not loading, broken images
          
          **Resolution:**
          ```bash
          # Regenerate assets
          cd .github/scripts
          npm run generate
          
          # Clear CDN cache (simulate)
          echo "CDN cache cleared"
          
          # Redeploy with fresh assets
          gh workflow run "🚀 Production CV Enhancement Pipeline" \
            --field force_refresh=true
          ```
          
          ### Performance Degradation
          
          **Symptoms:** Slow loading, poor Lighthouse scores
          
          **Resolution:**
          ```bash
          # Run performance audit
          gh workflow run "⚡ Performance Testing & Analytics Pipeline" \
            --field test_intensity=comprehensive
          
          # Check for resource bottlenecks
          # Review asset sizes and optimization
          # Verify CDN configuration
          ```
          
          ---
          *Last Updated: $(date -u +"%Y-%m-%d %H:%M UTC") | Version: ${{ env.DOCUMENTATION_VERSION }}*
          EOF
          
          # Create maintenance runbook
          cat > ${{ env.DOCS_OUTPUT_DIR }}/runbooks/system-maintenance.md << 'EOF'
          # 🔧 System Maintenance Runbook
          
          ## Regular Maintenance Schedule
          
          ### Daily Tasks (Automated)
          - **Security Scanning**: Vulnerability detection
          - **Performance Monitoring**: Core Web Vitals tracking
          - **Health Checks**: Availability monitoring
          - **Backup Verification**: Git repository integrity
          
          ### Weekly Tasks
          - **Dependency Updates**: Security patches
          - **Performance Review**: Lighthouse score trends
          - **Log Analysis**: Error pattern identification
          - **Documentation Updates**: Runbook maintenance
          
          ### Monthly Tasks
          - **Security Audit**: Comprehensive security review
          - **Performance Optimization**: Asset optimization review
          - **Infrastructure Review**: Terraform plan validation
          - **Disaster Recovery Test**: Rollback procedure testing
          
          ### Quarterly Tasks
          - **Technology Stack Review**: Dependency upgrades
          - **Architecture Review**: System design validation
          - **Security Penetration Testing**: External security audit
          - **Business Continuity Planning**: DR plan updates
          
          ## Maintenance Procedures
          
          ### Dependency Management
          
          **Security Updates (High Priority)**
          ```bash
          # Check for security vulnerabilities
          cd .github/scripts
          npm audit
          
          # Fix critical vulnerabilities
          npm audit fix --only=prod
          
          # Update package-lock.json
          npm update
          
          # Test changes
          npm test
          
          # Deploy if tests pass
          git add package*.json
          git commit -m "🔒 Security updates: dependency patches"
          git push origin main
          ```
          
          **Feature Updates (Low Priority)**
          ```bash
          # Check outdated packages
          npm outdated
          
          # Update non-critical packages
          npm update
          
          # Test thoroughly in staging
          gh workflow run "🚀 Staging Environment Deployment"
          
          # Deploy to production after validation
          gh workflow run "🚀 Production CV Enhancement Pipeline"
          ```
          
          ### Performance Maintenance
          
          **Asset Optimization**
          ```bash
          # Analyze bundle sizes
          cd .github/scripts
          npm run analyze
          
          # Optimize images
          # (Manual process - compress images, convert to WebP)
          
          # Minify assets
          npm run build:production
          
          # Test performance
          gh workflow run "⚡ Performance Testing & Analytics Pipeline"
          ```
          
          **Cache Management**
          ```bash
          # Clear service worker cache (if needed)
          # Update service worker version
          
          # Force cache refresh in deployment
          gh workflow run "🚀 Production CV Enhancement Pipeline" \
            --field force_refresh=true
          ```
          
          ### Security Maintenance
          
          **Certificate Management**
          - GitHub Pages automatically manages SSL certificates
          - Monitor certificate expiration (GitHub handles renewal)
          - Verify HTTPS redirect functionality
          
          **Secrets Rotation**
          ```bash
          # Rotate API keys (manual process)
          # 1. Generate new keys in respective services
          # 2. Update GitHub secrets
          # 3. Test with new credentials
          # 4. Revoke old credentials
          
          # Example: Claude AI API key rotation
          echo "New ANTHROPIC_API_KEY" | gh secret set ANTHROPIC_API_KEY
          
          # Test new credentials
          gh workflow run "🛡️ Enterprise Security Scanning Pipeline"
          ```
          
          **Access Review**
          - Review repository access permissions quarterly
          - Audit GitHub Actions workflow permissions
          - Verify branch protection rules
          - Review webhook configurations
          
          ### Infrastructure Maintenance
          
          **Terraform State Management**
          ```bash
          # Validate infrastructure configuration
          cd infrastructure
          terraform validate
          
          # Check for drift
          terraform plan
          
          # Apply any necessary changes
          terraform apply
          ```
          
          **Workflow Optimization**
          ```bash
          # Review workflow performance
          gh run list --workflow="Enterprise Testing Pipeline" --limit=20
          
          # Optimize slow workflows
          # - Parallelize jobs where possible
          # - Cache dependencies
          # - Reduce redundant operations
          ```
          
          ## System Health Checks
          
          ### Manual Health Verification
          
          ```bash
          #!/bin/bash
          echo "🔍 Performing system health check..."
          
          # Check website availability
          if curl -f -s https://adrianwedd.github.io/cv > /dev/null; then
              echo "✅ Main website: Available"
          else
              echo "❌ Main website: Unavailable"
          fi
          
          # Check dashboard availability
          if curl -f -s https://adrianwedd.github.io/cv/career-intelligence-dashboard.html > /dev/null; then
              echo "✅ Career dashboard: Available"
          else
              echo "❌ Career dashboard: Unavailable"
          fi
          
          # Check recent deployment status
          LAST_DEPLOYMENT=$(gh run list --workflow="Production CV Enhancement" --limit=1 --json status,conclusion | jq -r '.[0].conclusion')
          if [ "$LAST_DEPLOYMENT" = "success" ]; then
              echo "✅ Last deployment: Successful"
          else
              echo "❌ Last deployment: Failed ($LAST_DEPLOYMENT)"
          fi
          
          # Check security scan results
          SECURITY_STATUS=$(gh run list --workflow="Security Scanning" --limit=1 --json conclusion | jq -r '.[0].conclusion')
          if [ "$SECURITY_STATUS" = "success" ]; then
              echo "✅ Security scan: Passed"
          else
              echo "❌ Security scan: Failed"
          fi
          
          echo "🔍 Health check completed"
          ```
          
          ### Automated Health Monitoring
          
          The system includes automated health monitoring through:
          - **GitHub Actions workflows**: Continuous monitoring
          - **Deployment verification**: Post-deployment health checks
          - **Performance monitoring**: Regular performance assessments
          - **Security scanning**: Automated vulnerability detection
          
          ## Backup and Recovery
          
          ### Data Backup Strategy
          
          **Primary Backup**: Git repository (distributed version control)
          - All code, configuration, and documentation in Git
          - Multiple copies across GitHub infrastructure
          - Branch-based backup strategy
          
          **Secondary Backup**: GitHub repository settings
          - Workflow configurations
          - Repository settings and permissions
          - Secrets and environment variables (encrypted)
          
          ### Recovery Procedures
          
          **Repository Recovery**
          ```bash
          # Clone from backup location
          git clone https://github.com/adrianwedd/cv.git cv-recovery
          
          # Verify integrity
          cd cv-recovery
          git log --oneline | head -20
          
          # Restore to new repository if needed
          gh repo create cv-restored --public
          git remote add restored https://github.com/adrianwedd/cv-restored.git
          git push restored --all
          ```
          
          **Configuration Recovery**
          1. **Repository Settings**: Manually reconfigure through GitHub UI
          2. **Secrets**: Re-add from secure storage (1Password, etc.)
          3. **Webhooks**: Reconfigure any external integrations
          4. **Branch Protection**: Re-apply branch protection rules
          
          ## Troubleshooting Guide
          
          ### Common Issues and Solutions
          
          **Issue**: Workflows failing due to rate limits
          **Solution**:
          ```bash
          # Check API rate limit status
          gh api rate_limit
          
          # Wait for reset or use different token
          # Implement exponential backoff in scripts
          ```
          
          **Issue**: Assets not updating after deployment
          **Solution**:
          ```bash
          # Force cache invalidation
          gh workflow run "🚀 Production CV Enhancement Pipeline" \
            --field force_refresh=true
          
          # Check CDN cache headers
          curl -I https://adrianwedd.github.io/cv
          ```
          
          **Issue**: Performance degradation
          **Solution**:
          ```bash
          # Run comprehensive performance analysis
          gh workflow run "⚡ Performance Testing & Analytics Pipeline" \
            --field test_intensity=comprehensive
          
          # Review Lighthouse recommendations
          # Optimize identified bottlenecks
          ```
          
          ## Emergency Procedures
          
          ### System Down Emergency
          
          1. **Immediate Response** (0-5 minutes)
             - Confirm outage scope
             - Trigger automated rollback if available
             - Notify stakeholders
          
          2. **Investigation** (5-15 minutes)
             - Check GitHub status page
             - Review recent changes
             - Analyze error logs
          
          3. **Recovery** (15-30 minutes)
             - Implement fix or rollback
             - Verify system restoration
             - Monitor for stability
          
          4. **Post-Incident** (Within 24 hours)
             - Document incident details
             - Conduct post-mortem
             - Implement preventive measures
          
          ---
          *Last Updated: $(date -u +"%Y-%m-%d %H:%M UTC") | Version: ${{ env.DOCUMENTATION_VERSION }}*
          EOF
          
          echo "generated=true" >> $GITHUB_OUTPUT
          echo "✅ Operational runbooks generated"
          
      - name: 📤 Upload Operational Runbooks
        uses: actions/upload-artifact@v4
        with:
          name: operational-runbooks
          path: ${{ env.DOCS_OUTPUT_DIR }}/runbooks/

  # ==========================================
  # TROUBLESHOOTING DOCUMENTATION
  # ==========================================
  troubleshooting_guides:
    name: 🔧 Troubleshooting Guides Generation
    runs-on: ubuntu-latest
    
    outputs:
      guides_generated: ${{ steps.troubleshooting_gen.outputs.generated }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Generate Troubleshooting Documentation
        id: troubleshooting_gen
        run: |
          echo "🔧 **TROUBLESHOOTING GUIDES GENERATION**"
          
          mkdir -p ${{ env.DOCS_OUTPUT_DIR }}/troubleshooting
          
          # Create comprehensive troubleshooting guide
          cat > ${{ env.DOCS_OUTPUT_DIR }}/troubleshooting/diagnostic-procedures.md << 'EOF'
          # 🔧 Diagnostic Procedures & Troubleshooting Guide
          
          ## Quick Diagnostic Commands
          
          ### System Status Check
          ```bash
          #!/bin/bash
          echo "🔍 CV System Diagnostic Check"
          echo "================================"
          
          # Website availability
          echo "📊 Website Status:"
          curl -I https://adrianwedd.github.io/cv 2>/dev/null | head -1 || echo "❌ Main site unreachable"
          curl -I https://adrianwedd.github.io/cv/career-intelligence-dashboard.html 2>/dev/null | head -1 || echo "❌ Dashboard unreachable"
          
          # Recent workflow status
          echo -e "\n📋 Recent Workflows:"
          gh run list --limit=5 --json status,conclusion,name,createdAt | jq -r '.[] | "\(.name): \(.conclusion // .status) (\(.createdAt))"'
          
          # Performance check
          echo -e "\n⚡ Performance Check:"
          curl -w "Response Time: %{time_total}s\nHTTP Code: %{http_code}\n" -s -o /dev/null https://adrianwedd.github.io/cv
          
          # Security status
          echo -e "\n🛡️ Security Status:"
          SECURITY_RUN=$(gh run list --workflow="Security Scanning" --limit=1 --json conclusion | jq -r '.[0].conclusion')
          echo "Last security scan: $SECURITY_RUN"
          ```
          
          ### Performance Diagnostics
          ```bash
          # Quick Lighthouse audit
          npx lighthouse https://adrianwedd.github.io/cv --quiet --chrome-flags="--headless"
          
          # Check Core Web Vitals
          curl -s "https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=https://adrianwedd.github.io/cv&category=performance"
          
          # Network diagnostics
          curl -w "@curl-format.txt" -s -o /dev/null https://adrianwedd.github.io/cv
          ```
          
          Create `curl-format.txt`:
          ```
          time_namelookup:  %{time_namelookup}s
          time_connect:     %{time_connect}s
          time_appconnect:  %{time_appconnect}s
          time_pretransfer: %{time_pretransfer}s
          time_redirect:    %{time_redirect}s
          time_starttransfer: %{time_starttransfer}s
          time_total:       %{time_total}s
          ```
          
          ## Common Issues and Solutions
          
          ### Issue: Website Not Loading
          
          **Symptoms:**
          - HTTP 404/500 errors
          - DNS resolution failures
          - Blank page display
          
          **Diagnostic Steps:**
          1. **Check GitHub Pages Status**
             ```bash
             # Verify repository settings
             gh repo view --json hasPages
             
             # Check Pages deployment
             gh api repos/adrianwedd/cv/pages
             ```
          
          2. **Verify Build Process**
             ```bash
             # Check latest workflow runs
             gh run list --workflow="Production CV Enhancement" --limit=10
             
             # View failed workflow logs
             gh run view <run-id> --log
             ```
          
          3. **DNS and CDN Issues**
             ```bash
             # DNS lookup
             nslookup adrianwedd.github.io
             
             # Trace route
             traceroute adrianwedd.github.io
             
             # Check CDN headers
             curl -I https://adrianwedd.github.io/cv
             ```
          
          **Solutions:**
          ```bash
          # Force rebuild
          gh workflow run "🚀 Production CV Enhancement Pipeline" \
            --field enhancement_mode=emergency-update \
            --field force_refresh=true
          
          # If GitHub Pages issue, check repository settings
          # Settings > Pages > Source branch should be 'gh-pages'
          ```
          
          ### Issue: CSS/JavaScript Not Loading
          
          **Symptoms:**
          - Unstyled content
          - JavaScript errors
          - Missing interactive features
          
          **Diagnostic Steps:**
          1. **Check Asset Files**
             ```bash
             # Verify asset existence
             curl -I https://adrianwedd.github.io/cv/assets/styles.css
             curl -I https://adrianwedd.github.io/cv/assets/script.js
             
             # Check asset sizes
             curl -s https://adrianwedd.github.io/cv/assets/styles.css | wc -c
             ```
          
          2. **Browser Console Check**
             - Open browser developer tools
             - Check Console tab for JavaScript errors
             - Check Network tab for failed asset loads
          
          3. **Cache Issues**
             ```bash
             # Force no-cache request
             curl -H "Cache-Control: no-cache" https://adrianwedd.github.io/cv/assets/styles.css
             ```
          
          **Solutions:**
          ```bash
          # Regenerate assets
          cd .github/scripts
          npm run generate
          
          # Clear CDN cache (force deployment)
          gh workflow run "🚀 Production CV Enhancement Pipeline" \
            --field force_refresh=true
          
          # Check asset optimization
          npm run build:production
          ```
          
          ### Issue: Poor Performance
          
          **Symptoms:**
          - Slow page load times
          - Low Lighthouse scores
          - High Cumulative Layout Shift
          
          **Diagnostic Steps:**
          1. **Performance Audit**
             ```bash
             # Run performance test workflow
             gh workflow run "⚡ Performance Testing & Analytics Pipeline" \
               --field test_intensity=comprehensive
             
             # Manual Lighthouse audit
             npx lighthouse https://adrianwedd.github.io/cv \
               --output html \
               --output-path lighthouse-report.html
             ```
          
          2. **Asset Analysis**
             ```bash
             # Check asset sizes
             cd assets
             du -sh *
             
             # Check image optimization
             file *.jpg *.png *.webp 2>/dev/null
             ```
          
          3. **Network Analysis**
             ```bash
             # Check compression
             curl -H "Accept-Encoding: gzip" -I https://adrianwedd.github.io/cv
             
             # Test from different locations
             # Use online tools like GTmetrix, WebPageTest
             ```
          
          **Solutions:**
          ```bash
          # Optimize images
          # Convert to WebP format
          # Implement lazy loading
          
          # Minify assets
          npx clean-css-cli -o assets/styles.min.css assets/styles.css
          npx terser assets/script.js -o assets/script.min.js
          
          # Update HTML references to minified assets
          sed -i 's/styles.css/styles.min.css/g' index.html
          sed -i 's/script.js/script.min.js/g' index.html
          ```
          
          ### Issue: Security Scan Failures
          
          **Symptoms:**
          - Security workflow failures
          - Vulnerability alerts
          - Failed security gates
          
          **Diagnostic Steps:**
          1. **Check Vulnerability Details**
             ```bash
             # View security workflow logs
             gh run list --workflow="Security Scanning" --limit=5
             
             # Check specific vulnerability
             cd .github/scripts
             npm audit
             npm audit --audit-level=critical
             ```
          
          2. **Dependency Analysis**
             ```bash
             # Check outdated packages
             npm outdated
             
             # Check for known vulnerabilities
             npm audit --json
             ```
          
          **Solutions:**
          ```bash
          # Fix critical vulnerabilities
          npm audit fix --only=prod
          
          # Update specific vulnerable packages
          npm update <package-name>
          
          # If no auto-fix available, manual update
          npm install <package-name>@<safe-version>
          ```
          
          ### Issue: Deployment Failures
          
          **Symptoms:**
          - Workflow failures
          - Deployment timeouts
          - Git push rejections
          
          **Diagnostic Steps:**
          1. **Check Workflow Logs**
             ```bash
             # List recent failed runs
             gh run list --status=failure --limit=10
             
             # View specific failure
             gh run view <run-id> --log
             ```
          
          2. **Git Repository Issues**
             ```bash
             # Check repository status
             git status
             git log --oneline -10
             
             # Check for conflicts
             git diff HEAD~1
             ```
          
          **Solutions:**
          ```bash
          # Re-run failed workflow
          gh run rerun <run-id>
          
          # Force clean deployment
          gh workflow run "🚀 Production CV Enhancement Pipeline" \
            --field enhancement_mode=emergency-update
          
          # Manual git cleanup if needed
          git reset --hard HEAD~1
          git push --force-with-lease origin main
          ```
          
          ## Advanced Diagnostics
          
          ### Memory and Resource Usage
          ```bash
          # Monitor workflow resource usage
          # (GitHub Actions provides limited visibility)
          
          # Check asset sizes for optimization
          find assets -type f -exec du -h {} \; | sort -h
          
          # Analyze bundle composition
          cd .github/scripts
          npm run analyze 2>/dev/null || echo "Bundle analyzer not configured"
          ```
          
          ### Network Connectivity Tests
          ```bash
          # Test from multiple locations
          curl -w "%{time_total}\n" -s -o /dev/null https://adrianwedd.github.io/cv
          
          # Test different endpoints
          for endpoint in "" "/career-intelligence-dashboard.html" "/watch-me-work-dashboard.html"; do
              echo "Testing: $endpoint"
              curl -w "Time: %{time_total}s | Status: %{http_code}\n" \
                   -s -o /dev/null \
                   "https://adrianwedd.github.io/cv$endpoint"
          done
          ```
          
          ### Security Deep Dive
          ```bash
          # Check security headers
          curl -I https://adrianwedd.github.io/cv | grep -E "(X-|Content-Security-Policy|Strict-Transport-Security)"
          
          # Test for common vulnerabilities
          # (Use security scanning tools)
          
          # Check for exposed sensitive data
          curl -s https://adrianwedd.github.io/cv | grep -i "password\|secret\|key\|token"
          ```
          
          ## Monitoring and Alerting Diagnostics
          
          ### Check Monitoring Status
          ```bash
          # Run monitoring workflow manually
          gh workflow run "📊 Deployment Monitoring & Observability"
          
          # Check recent monitoring results
          gh run list --workflow="Deployment Monitoring" --limit=5
          ```
          
          ### Alert System Testing
          ```bash
          # Test alert conditions (simulate)
          # This would typically involve triggering test alerts
          
          echo "Testing alert system..."
          echo "1. Performance threshold alerts"
          echo "2. Security vulnerability alerts"
          echo "3. Availability monitoring alerts"
          echo "4. Error rate threshold alerts"
          ```
          
          ## Recovery Procedures
          
          ### Complete System Recovery
          
          1. **Assessment Phase**
             ```bash
             # Determine scope of issue
             ./diagnostic-check.sh
             
             # Check recent changes
             git log --oneline -20
             gh run list --limit=20
             ```
          
          2. **Isolation Phase**
             ```bash
             # Stop any running deployments
             gh run cancel <run-id>
             
             # Prevent new deployments (if needed)
             # Disable workflow triggers temporarily
             ```
          
          3. **Recovery Phase**
             ```bash
             # Rollback to known good state
             git checkout <known-good-commit>
             gh workflow run "🚀 Production CV Enhancement Pipeline"
             
             # Or use emergency rollback
             gh workflow run "🌊 Blue-Green Zero-Downtime Deployment" \
               --field action=rollback
             ```
          
          4. **Verification Phase**
             ```bash
             # Verify system functionality
             curl -I https://adrianwedd.github.io/cv
             
             # Run health checks
             gh workflow run "📊 Deployment Monitoring & Observability"
             
             # Performance validation
             npx lighthouse https://adrianwedd.github.io/cv --quiet
             ```
          
          ---
          *Last Updated: $(date -u +"%Y-%m-%d %H:%M UTC") | Version: ${{ env.DOCUMENTATION_VERSION }}*
          EOF
          
          echo "generated=true" >> $GITHUB_OUTPUT
          echo "✅ Troubleshooting guides generated"
          
      - name: 📤 Upload Troubleshooting Guides
        uses: actions/upload-artifact@v4
        with:
          name: troubleshooting-guides
          path: ${{ env.DOCS_OUTPUT_DIR }}/troubleshooting/

  # ==========================================
  # DOCUMENTATION COMPILATION AND PUBLISHING
  # ==========================================
  documentation_publisher:
    name: 📚 Documentation Publisher
    runs-on: ubuntu-latest
    needs: [architecture_documentation, operational_runbooks, troubleshooting_guides]
    if: always()
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 📥 Download All Documentation
        uses: actions/download-artifact@v4
        with:
          path: all-documentation
          
      - name: 📚 Compile Master Documentation
        run: |
          echo "📚 **COMPILING MASTER DOCUMENTATION**"
          
          mkdir -p docs/generated
          
          # Copy all generated documentation
          find all-documentation -name "*.md" -exec cp {} docs/generated/ \;
          
          # Create master index
          cat > docs/generated/README.md << 'EOF'
          # 📚 CV System Documentation
          
          ## 📖 Documentation Index
          
          ### 🏗️ System Architecture
          - **[System Overview](system-overview.md)** - Complete system architecture and component relationships
          - **[Deployment Flow](deployment-flow.md)** - Deployment architecture and multi-environment strategy
          
          ### 📋 Operational Runbooks
          - **[Incident Response](incident-response.md)** - Emergency response procedures and escalation
          - **[Deployment Procedures](deployment-procedures.md)** - Standard and emergency deployment processes
          - **[System Maintenance](system-maintenance.md)** - Regular maintenance tasks and procedures
          
          ### 🔧 Troubleshooting Guides
          - **[Diagnostic Procedures](diagnostic-procedures.md)** - Comprehensive troubleshooting and diagnostics
          
          ## 🚀 Quick Start Guide
          
          ### For Developers
          1. **Setup Development Environment**
             ```bash
             git clone https://github.com/adrianwedd/cv.git
             cd cv/.github/scripts
             npm install
             ```
          
          2. **Run Local Development**
             ```bash
             # Start local server
             python -m http.server 8000
             
             # Run tests
             npm test
             
             # Generate CV
             npm run generate
             ```
          
          3. **Deploy to Staging**
             ```bash
             gh workflow run "🚀 Staging Environment Deployment"
             ```
          
          ### For Operations
          1. **Monitor System Health**
             ```bash
             gh workflow run "📊 Deployment Monitoring & Observability"
             ```
          
          2. **Deploy to Production**
             ```bash
             gh workflow run "🌊 Blue-Green Zero-Downtime Deployment" \
               --field environment=production
             ```
          
          3. **Emergency Rollback**
             ```bash
             gh workflow run "🌊 Blue-Green Zero-Downtime Deployment" \
               --field action=rollback
             ```
          
          ## 📊 System Status
          
          ### Current Architecture
          - **Hosting**: GitHub Pages
          - **CI/CD**: GitHub Actions (21 workflows)
          - **Monitoring**: Custom deployment monitoring
          - **Security**: Enterprise security scanning
          - **Performance**: Core Web Vitals tracking
          
          ### Key Metrics Targets
          - **Availability**: 99.9%
          - **Response Time**: < 2000ms
          - **Performance Score**: > 85
          - **Security Score**: > 90
          
          ## 🔗 Useful Links
          
          - **Live Site**: [adrianwedd.github.io/cv](https://adrianwedd.github.io/cv)
          - **Repository**: [github.com/adrianwedd/cv](https://github.com/adrianwedd/cv)
          - **GitHub Actions**: [github.com/adrianwedd/cv/actions](https://github.com/adrianwedd/cv/actions)
          
          ## 📞 Emergency Contacts
          
          | Role | Contact | Availability |
          |------|---------|-------------|
          | **System Owner** | Primary Developer | 24/7 |
          | **Backup Support** | Secondary Developer | Business Hours |
          | **Security Team** | Security Contact | 24/7 for P0 |
          
          ---
          *Documentation generated on $(date -u +"%Y-%m-%d %H:%M UTC") by CV Documentation Generator v${{ env.DOCUMENTATION_VERSION }}*
          EOF
          
          # Create table of contents
          echo "## 📋 Table of Contents" > docs/generated/toc.md
          echo "" >> docs/generated/toc.md
          for file in docs/generated/*.md; do
            if [ "$(basename "$file")" != "README.md" ] && [ "$(basename "$file")" != "toc.md" ]; then
              TITLE=$(head -1 "$file" | sed 's/^# //')
              FILENAME=$(basename "$file")
              echo "- [$TITLE]($FILENAME)" >> docs/generated/toc.md
            fi
          done
          
          echo "📚 Master documentation compiled"
          
      - name: 📊 Documentation Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # 📚 Documentation & Runbook Generation Results
          
          ## 📖 Generated Documentation
          | Category | Generated | Files |
          |----------|-----------|--------|
          | **Architecture** | ${{ needs.architecture_documentation.outputs.architecture_generated == 'true' && '✅' || '❌' }} | System Overview, Deployment Flow |
          | **Runbooks** | ${{ needs.operational_runbooks.outputs.runbooks_generated == 'true' && '✅' || '❌' }} | Incident Response, Deployment, Maintenance |
          | **Troubleshooting** | ${{ needs.troubleshooting_guides.outputs.guides_generated == 'true' && '✅' || '❌' }} | Diagnostic Procedures |
          
          ## 📚 Documentation Coverage
          - **🏗️ System Architecture**: Complete component diagrams and data flow
          - **📋 Operational Procedures**: Incident response and deployment runbooks
          - **🔧 Troubleshooting**: Comprehensive diagnostic and recovery procedures
          - **📊 Monitoring**: Health check and alerting procedures
          - **🛡️ Security**: Emergency response and security procedures
          
          ## 🎯 Documentation Features
          - **Mermaid Diagrams**: Visual system architecture representations
          - **Command Examples**: Copy-paste ready commands
          - **Step-by-Step Procedures**: Detailed operational guidance
          - **Emergency Contacts**: Escalation and contact information
          - **Troubleshooting Matrix**: Issue symptoms and solutions
          
          ## 📂 Documentation Structure
          ```
          docs/generated/
          ├── README.md                    # Master index
          ├── system-overview.md           # Architecture overview
          ├── deployment-flow.md           # Deployment architecture
          ├── incident-response.md         # Emergency procedures
          ├── deployment-procedures.md     # Standard deployments
          ├── system-maintenance.md        # Maintenance runbooks
          └── diagnostic-procedures.md     # Troubleshooting guide
          ```
          
          ## 🔗 Documentation Access
          - **Generated Files**: Available in workflow artifacts
          - **Master Index**: `docs/generated/README.md`
          - **Quick Reference**: Each document includes command examples
          - **Emergency Procedures**: Incident response runbook ready
          
          ## 📋 Next Steps
          1. **Review Generated Documentation**: Verify completeness and accuracy
          2. **Update Repository**: Commit documentation to repository
          3. **Train Team**: Share runbooks with operations team
          4. **Test Procedures**: Validate emergency procedures in staging
          5. **Schedule Updates**: Set up regular documentation maintenance
          
          ---
          *Documentation Generator v${{ env.DOCUMENTATION_VERSION }} - Enterprise-grade operational documentation*
          EOF
          
      - name: 📤 Upload Complete Documentation Package
        uses: actions/upload-artifact@v4
        with:
          name: complete-documentation-package
          path: docs/generated/
          retention-days: 365
          
      - name: 📚 Create Documentation Archive
        run: |
          mkdir -p documentation-archive
          
          cat > documentation-archive/documentation-metadata.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "documentation_version": "${{ env.DOCUMENTATION_VERSION }}",
            "generation_type": "${{ inputs.documentation_type || 'comprehensive' }}",
            "components_generated": {
              "architecture": ${{ needs.architecture_documentation.outputs.architecture_generated == 'true' }},
              "runbooks": ${{ needs.operational_runbooks.outputs.runbooks_generated == 'true' }},
              "troubleshooting": ${{ needs.troubleshooting_guides.outputs.guides_generated == 'true' }}
            },
            "documentation_files": [
              "README.md",
              "system-overview.md", 
              "deployment-flow.md",
              "incident-response.md",
              "deployment-procedures.md",
              "system-maintenance.md",
              "diagnostic-procedures.md"
            ],
            "coverage": {
              "architecture_diagrams": "mermaid",
              "operational_procedures": "comprehensive",
              "troubleshooting_guides": "detailed",
              "emergency_procedures": "complete"
            },
            "maintenance": {
              "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "update_frequency": "weekly_automated",
              "manual_review_required": "monthly"
            }
          }
          EOF
          
          echo "📚 Documentation archive created"
          
      - name: 📤 Upload Documentation Archive
        uses: actions/upload-artifact@v4
        with:
          name: documentation-archive
          path: documentation-archive/
          retention-days: 365