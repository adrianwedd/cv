name: 🚀 Staging Environment Deployment

# Staging deployment for develop branch
# Provides safe testing environment before production

on:
  push:
    branches: [ develop ]
  schedule:
    # Run every 2 hours for continuous testing
    # Reduced frequency - only once daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_full_rebuild:
        description: '🔄 Force complete rebuild'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  STAGING_BRANCH: 'gh-pages-staging'

jobs:
  # DISABLED FOR BILLING - REMOVE WHEN BILLING RESOLVED
  disabled:
    if: true
    runs-on: ubuntu-latest
    steps:
      - run: echo "All workflows disabled for billing management"
  
  staging-quality-gates:
    if: false  # DISABLED
    name: 🛡️ Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.passed }}
      
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '.github/scripts/package-lock.json'
          
      - name: 📦 Install Dependencies
        run: |
          cd .github/scripts
          npm ci --silent
          
      - name: 🧪 Run Quality Checks
        id: quality-check
        run: |
          cd .github/scripts
          
          echo "🧪 **STAGING QUALITY GATES**"
          echo "============================"
          
          # Lint check
          echo "📝 Running ESLint..."
          if npm run lint; then
            echo "✅ Lint: PASSED"
            LINT_PASSED=true
          else
            echo "❌ Lint: FAILED"
            LINT_PASSED=false
          fi
          
          # Data validation
          echo "📊 Validating data files..."
          DATA_VALID=true
          for file in ../../data/*.json; do
            if [ -f "$file" ]; then
              if jq empty "$file" 2>/dev/null; then
                echo "✅ $(basename "$file"): Valid JSON"
              else
                echo "❌ $(basename "$file"): Invalid JSON"
                DATA_VALID=false
              fi
            fi
          done
          
          # Overall quality gate
          if [ "$LINT_PASSED" = true ] && [ "$DATA_VALID" = true ]; then
            echo "quality_passed=true" >> $GITHUB_OUTPUT
            echo "✅ **Quality Gates: PASSED**"
          else
            echo "quality_passed=false" >> $GITHUB_OUTPUT
            echo "❌ **Quality Gates: FAILED**"
            exit 1
          fi

  staging-build:
    name: 🏗️ Build Staging Site
    runs-on: ubuntu-latest
    needs: staging-quality-gates
    if: needs.staging-quality-gates.outputs.quality-passed == 'true'
    timeout-minutes: 30
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🔧 Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '.github/scripts/package-lock.json'
          
      - name: 📦 Install Dependencies
        run: |
          cd .github/scripts
          npm ci --silent
          
      - name: 🤖 GitHub Activity Analysis
        run: |
          cd .github/scripts
          echo "📊 **STAGING: GITHUB ACTIVITY ANALYSIS**"
          
          if node activity-analyzer.js; then
            echo "✅ Activity analysis completed"
          else
            echo "⚠️ Activity analysis failed, using cached data"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🧠 AI Content Enhancement
        run: |
          cd .github/scripts
          echo "🧠 **STAGING: AI CONTENT ENHANCEMENT**"
          
          # Try browser authentication first, then API fallback
          if node claude-enhancer.js; then
            echo "✅ AI enhancement completed"
          else
            echo "⚠️ AI enhancement failed, using existing content"
          fi
        env:
          CLAUDE_SESSION_KEY: ${{ secrets.CLAUDE_SESSION_KEY }}
          CLAUDE_ORG_ID: ${{ secrets.CLAUDE_ORG_ID }}
          CLAUDE_USER_ID: ${{ secrets.CLAUDE_USER_ID }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AUTH_STRATEGY: browser_first
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🛡️ AI Hallucination Detection
        continue-on-error: true
        run: |
          cd .github/scripts
          echo "🛡️ **STAGING: AI HALLUCINATION DETECTION**"
          
          if npm run hallucination:detect; then
            echo "✅ Hallucination detection: PASSED"
          else
            echo "⚠️ Hallucination detection: WARNING - Content flagged for review"
          fi
          
      - name: 🎨 Generate Staging Website
        run: |
          cd .github/scripts
          echo "🎨 **STAGING: WEBSITE GENERATION**"
          
          # Set staging-specific environment
          export SITE_URL="https://adrianwedd.github.io/cv-staging"
          export STAGING_ENV=true
          
          if node cv-generator.js; then
            echo "✅ Staging website generated"
          else
            echo "❌ Website generation failed"
            exit 1
          fi
          
      - name: 📋 Multi-Format Validation
        run: |
          cd .github/scripts
          echo "📋 **STAGING: MULTI-FORMAT VALIDATION**"
          
          if npm run formats:validate; then
            echo "✅ Multi-format validation: PASSED"
          else
            echo "⚠️ Multi-format validation: WARNING"
          fi
          
      - name: 🚀 Deploy to Staging
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages-staging
          force_orphan: true
          commit_message: |
            🚀 Staging deployment from develop branch
            
            Generated from commit: ${{ github.sha }}
            Triggered by: ${{ github.event_name }}
            
            🔗 Staging URL: https://adrianwedd.github.io/cv-staging
            
            🤖 Generated with [Claude Code](https://claude.ai/code)
            
      - name: 📊 Generate Staging Report
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🚀 Staging Deployment Report
          
          **Branch**: develop  
          **Commit**: ${{ github.sha }}  
          **Status**: ${{ job.status }}  
          **Environment**: https://adrianwedd.github.io/cv-staging
          
          ### ✅ Quality Gates Passed
          - ESLint validation
          - JSON data validation  
          - Multi-format generation
          - AI hallucination detection
          
          ### 🔗 Staging Environment
          - **URL**: https://adrianwedd.github.io/cv-staging
          - **Branch**: gh-pages-staging
          - **Auto-deploy**: Every 2 hours from develop
          - **Manual Deploy**: Workflow dispatch available
          
          ### 🎯 Next Steps
          - Review staging environment
          - Test all functionality  
          - When ready, create PR from develop → main
          - Production deployment will trigger automatically
          EOF

  staging-notification:
    name: 📢 Staging Notification
    runs-on: ubuntu-latest
    needs: [staging-quality-gates, staging-build]
    if: always()
    
    steps:
      - name: 📢 Success Notification
        if: needs.staging-build.result == 'success'
        run: |
          echo "✅ **STAGING DEPLOYMENT SUCCESSFUL**"
          echo "🔗 Staging environment updated: https://adrianwedd.github.io/cv-staging"
          echo "📝 All quality gates passed"
          echo "🚀 Ready for production review"
          
      - name: 📢 Failure Notification  
        if: needs.staging-build.result == 'failure' || needs.staging-quality-gates.result == 'failure'
        run: |
          echo "❌ **STAGING DEPLOYMENT FAILED**"
          echo "🔍 Check workflow logs for details"
          echo "🛠️ Fix issues in develop branch"
          echo "🔄 Push changes to trigger new staging build"