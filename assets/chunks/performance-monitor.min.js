export class PerformanceMonitor{constructor(){this.metrics ={loadTime: 0, renderTime: 0, interactionTime: 0, coreWebVitals:{}}; this.init()}init(){console.log('üìä Initializing Performance Monitor...'); this.setupPerformanceObserver(); this.trackCoreWebVitals(); this.startResourceMonitoring()}setupPerformanceObserver(){if ('PerformanceObserver' in window){const observer = new PerformanceObserver((list) =>{for (const entry of list.getEntries()){if (entry.entryType === 'layout-shift' && !entry.hadRecentInput){this.metrics.coreWebVitals.cls = (this.metrics.coreWebVitals.cls || 0) + entry.value}}}); observer.observe({entryTypes: ['layout-shift']})}}trackCoreWebVitals(){if ('PerformanceObserver' in window){const observer = new PerformanceObserver((list) =>{const entries = list.getEntries(); const lastEntry = entries[entries.length - 1]; this.metrics.coreWebVitals.lcp = lastEntry.startTime}); observer.observe({entryTypes: ['largest-contentful-paint']})}if ('PerformanceEventTiming' in window){const observer = new PerformanceObserver((list) =>{for (const entry of list.getEntries()){if (entry.name === 'first-input'){this.metrics.coreWebVitals.fid = entry.processingStart - entry.startTime; break}}}); observer.observe({entryTypes: ['first-input']})}}startResourceMonitoring(){if ('PerformanceObserver' in window){const observer = new PerformanceObserver((list) =>{for (const entry of list.getEntries()){if (entry.transferSize > 50000){console.log(`‚ö†Ô∏è Large resource: ${entry.name}(${(entry.transferSize / 1024).toFixed(2)}KB)`)}}}); observer.observe({entryTypes: ['resource']})}}getMetrics(){return{...this.metrics, navigationTiming: performance.timing, resourceCount: performance.getEntriesByType('resource').length}}}