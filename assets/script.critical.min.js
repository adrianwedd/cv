'use strict'; const CONFIG ={DATA_ENDPOINTS:{BASE_CV: 'data/base-cv.json', ACTIVITY_SUMMARY: 'data/activity-summary.json', AI_ENHANCEMENTS: 'data/ai-enhancements.json', GITHUB_API: 'https:}, CACHE_DURATION: 300000, ANIMATION_DURATION: 300, USERNAME: 'adrianwedd', PERFORMANCE_BUDGET:{MAX_LOAD_TIME: 2000, CRITICAL_RENDER_TIME: 1000, IMAGE_LAZY_THRESHOLD: 50}}; class CVApplication{constructor(){this.currentSection = 'about'; this.cache = new Map(); this.themePreference = 'dark'; this.isLoading = true; this.loadingStartTime = Date.now(); this.init()}async init(){console.log('🚀 Initializing CV Application (Critical Path)...'); try{this.applyTheme(this.themePreference); this.setupBasicEventListeners(); this.setupNavigationSystem(); await this.loadCriticalData(); this.showInitialContent(); this.completeLoadingSequence(); this.queueLazyFeatures(); console.log('✅ Critical path initialized')}catch (error){console.error('❌ Critical initialization failed:', error); this.handleInitializationError(error)}}applyTheme(theme){document.documentElement.setAttribute('data-theme', theme); document.body.classList.add('theme-applied')}setupBasicEventListeners(){document.addEventListener('click', (e) =>{const navItem = e.target.closest('.nav-item'); if (navItem){e.preventDefault(); const section = navItem.dataset.section; if (section){this.navigateToSection(section)}}}); window.addEventListener('hashchange', () =>{this.handleRouteChange()})}setupNavigationSystem(){const navItems = document.querySelectorAll('.nav-item'); navItems.forEach(item =>{item.addEventListener('click', (e) =>{e.preventDefault(); const section = item.dataset.section; if (section){this.navigateToSection(section)}})})}async loadCriticalData(){try{const response = await fetch(CONFIG.DATA_ENDPOINTS.BASE_CV); if (response.ok){const cvData = await response.json(); this.cache.set('cv-data', cvData); return cvData}}catch (error){console.warn('Failed to load critical data:', error); return null}}showInitialContent(){const loadingElement = document.querySelector('.loading-overlay'); if (loadingElement){loadingElement.style.display = 'none'}const mainContent = document.querySelector('main'); if (mainContent){mainContent.style.opacity = '1'; mainContent.style.visibility = 'visible'}}navigateToSection(section){this.currentSection = section; window.history.pushState({section}, '', `#${section}`); this.showSection(section); this.updateNavigationState(section)}showSection(section){document.querySelectorAll('.section').forEach(s =>{s.style.display = 'none'}); const targetSection = document.querySelector(`[data-section="${section}"]`); if (targetSection){targetSection.style.display = 'block'; targetSection.scrollIntoView({behavior: 'smooth'})}}updateNavigationState(activeSection){document.querySelectorAll('.nav-item').forEach(item =>{item.classList.remove('active'); if (item.dataset.section === activeSection){item.classList.add('active')}})}handleRouteChange(){const hash = window.location.hash.slice(1); if (hash){this.navigateToSection(hash)}}completeLoadingSequence(){const loadTime = Date.now() - this.loadingStartTime; console.log(`✅ Critical path loaded in ${loadTime}ms`); document.body.classList.add('core-loaded'); this.isLoading = false}queueLazyFeatures(){if ('requestIdleCallback' in window){requestIdleCallback(() =>{this.loadLazyFeatures()})}else{setTimeout(() =>{this.loadLazyFeatures()}, 100)}}async loadLazyFeatures(){try{const{PerformanceMonitor}= await import('./chunks/performance-monitor.js'); this.performanceMonitor = new PerformanceMonitor(); const{GitHubIntegration}= await import('./chunks/github-integration.js'); this.githubIntegration = new GitHubIntegration(); const{DataVisualizer}= await import('./chunks/data-visualizer.js'); this.dataVisualizer = new DataVisualizer(); console.log('✅ Lazy features loaded')}catch (error){console.warn('Failed to load some lazy features:', error)}}handleInitializationError(error){console.error('Initialization error:', error); const errorElement = document.createElement('div'); errorElement.className = 'error-state'; errorElement.innerHTML = ` <h2>Loading Error</h2> <p>The CV is temporarily unavailable. Please refresh the page.</p> <button onclick="window.location.reload()">Refresh</button> `; document.body.appendChild(errorElement)}}if (document.readyState === 'loading'){document.addEventListener('DOMContentLoaded', () =>{window.cvApp = new CVApplication()})}else{window.cvApp = new CVApplication()}